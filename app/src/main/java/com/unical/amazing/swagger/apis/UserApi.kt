/**
 * OpenAPi NerdWarehouse
 * OpenApi documentation for Spring Security
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.NewUserDto
import io.swagger.client.models.UserDto

import io.swagger.client.infrastructure.*

class UserApi(basePath: kotlin.String = "http://localhost:8010/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return NewUserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun addUser(body: NewUserDto): NewUserDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/users"
        )
        val response = request<NewUserDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as NewUserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * this is the list of user
     * Get endpoint for user
     * @param email  
     * @return UserDto
     */
    @Suppress("UNCHECKED_CAST")
    fun findByEmail(email: kotlin.String): UserDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/users/{email}".replace("{" + "email" + "}", "$email")
        )
        val response = request<UserDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
